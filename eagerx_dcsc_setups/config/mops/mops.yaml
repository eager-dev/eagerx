default:
  sensors: [mops_output, action_applied, image]
  actuators: [mops_input]
  states: [model_state]
  rate: 30
  always_render: False

#########################
## Agnostic definition ##
#########################
sensors: # inputs of ode
  mops_output:
    rate: $(default rate)
    msg_type: std_msgs.msg/Float32MultiArray
    window: 1
    space_converter:
      converter_type: eagerx_bridge_ode.converters/Space_RosFloat32MultiArray
      low: [ -1, -1, -9 ]
      high: [ 1, 1, 9 ]
    converter:
      converter_type: eagerx_dcsc_setups.converters/AngleDecomposition

  action_applied:
    rate: $(default rate)
    msg_type: std_msgs.msg/Float32MultiArray
    window: 1
    space_converter:
      converter_type: eagerx_bridge_ode.converters/Space_RosFloat32MultiArray
      low: [ -3 ]
      high: [ 3 ]

  image:
    rate: $(default rate)
    msg_type: sensor_msgs.msg/Image

actuators: # outputs of ode
  mops_input:
    rate: $(default rate)
    msg_type: std_msgs.msg/Float32MultiArray
    window: 1
    space_converter:
      converter_type: eagerx_bridge_ode.converters/Space_RosFloat32MultiArray
      low: [ -3 ]
      high: [ 3 ]

states:  # reset states inside bridge
  model_state:
    msg_type: std_msgs.msg/Float32MultiArray
    space_converter:
      converter_type: eagerx_bridge_ode.converters/Space_RosFloat32MultiArray
      low: [ -3.14159265359, -9 ]
      high: [ 3.14159265359, 9 ]
  model_parameters:
    msg_type: std_msgs.msg/Float32MultiArray
    space_converter:
      converter_type: eagerx_bridge_ode.converters/Space_RosFloat32MultiArray
      low: [1.7955e-04, 5.3580e-02, 4.1610e-02, 1.3490e-04, 4.7690e-02, 9.3385e+00, 1.4250e+00, 1.7480e-03]
      high: [1.98450e-04, 5.92200e-02, 4.59900e-02, 1.49100e-04, 5.27100e-02, 1.03215e+01, 1.57500e+00, 1.93200e-03]

#########################
### Engine definition ###
#########################
eagerx_bridge_ode/bridge:
  ode: eagerx_dcsc_setups.mops.ode/mops_ode
  sensors:
    mops_output:
      node_config: eagerx_bridge_ode/observation # These nodes cannot have an internal state
      outputs: [observation]

    action_applied:
      node_config:  eagerx_bridge_ode/action_applied
      inputs: {action_applied: $(ns obj_name)/actuators/mops_input/outputs/action_applied}
      outputs: [action_applied]

    image:
      node_config: eagerx_dcsc_setups/mops_render # These nodes cannot have an internal state
      inputs: {theta: $(ns obj_name)/sensors/mops_output}
      outputs: [ image ]
      color: cyan
      process: 0  # {0: NEW_PROCESS, 1: ENVIRONMENT, 2: BRIDGE, 3: EXTERNAL}
      shape: [ 480, 480 ]

  actuators:  # Inputs as defined above
    mops_input:
      node_config: eagerx_bridge_ode/action
      inputs: {action: } # actuator input mapping to sim_node input name inside node_config

  states:
    model_state:
      state_type: eagerx_bridge_ode.simstates/OdeSimState
    model_parameters:
      state_type: eagerx_bridge_ode.simstates/OdeSimState

eagerx_bridge_real/bridge:
  launch_file: $(find eagerx_dcsc_setups)/launch/mops.launch
  sensors:
    mops_output:
      node_config: eagerx_dcsc_setups/mops_output # These nodes cannot have an internal state
      outputs: [ mops_output ]

    action_applied:
      node_config: eagerx_bridge_ode/action_applied
      inputs: { action_applied: $(ns obj_name)/actuators/mops_input/outputs/action_applied }
      outputs: [ action_applied ]

    image:
      node_config: eagerx_bridge_real/render
      outputs: [ image ]
      color: cyan
      process: 0  # {0: NEW_PROCESS, 1: ENVIRONMENT, 2: BRIDGE, 3: EXTERNAL}
      shape: [ 480, 480 ]
      camera_idx: 2

  actuators:  # Inputs as defined above
    mops_input:
      node_config: eagerx_dcsc_setups/mops_input
      inputs: {mops_input: } # actuator input mapping to sim_node input name inside node_config

  states:
    model_state:
      state_type: eagerx_dcsc_setups.mops.simstates/RandomActionAndSleep
