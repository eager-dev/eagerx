# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: CI

on:
  push:
  pull_request:
  schedule:
    - cron:  '0 23 * * *'

jobs:
  call-eagerx-ci-workflow:
    if: ${{ github.event_name == 'pull_request' || contains(github.ref_name, 'master') || github.event_name == 'schedule' || contains(toJSON(github.event.commits.*.message), '[ci run]') && (! contains(toJSON(github.event.commits.*.message), '[ci skip]') || contains(github.event.pull_request.labels.*.name, 'ci skip')) }}
    uses: eager_dev/eagerx_ci/.github/workflows/ci.yml@master
  test_docs:
    if: ${{ github.event_name == 'pull_request' || contains(github.ref_name, 'master') || github.event_name == 'schedule' || contains(toJSON(github.event.commits.*.message), '[ci run]') && (! contains(toJSON(github.event.commits.*.message), '[ci skip]') || contains(github.event.pull_request.labels.*.name, 'ci skip')) }}
    strategy:
      fail-fast: true
      matrix:
        os: [ "ubuntu-20.04" ]
        #        python-version: [ "3.6.2", "3.7", "3.8", "3.9" ]
        python-version: [ "3.8" ]
    runs-on: ${{ matrix.os }}
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Set up python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install library
        run: poetry install --no-interaction
      #----------------------------------------------
      # check codestyle & lint
      #----------------------------------------------
      - name: Check codestyle
        run: |
          make check-codestyle
      - name: Lint with flake8
        run: |
          make lint
      #----------------------------------------------
      # Build docs
      #----------------------------------------------
      - name: Build the doc
        run: |
          sudo apt-get install python3-sphinx
          source .venv/bin/activate
          make doc
